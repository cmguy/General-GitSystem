#!/bin/bash         
######################################################################################
# gitsys-backuprestore.bsh
#
#  Written by Andy Wallace 08/28/14
#
#  Purpose:
#
#  This script is designed to backup and restore the primary server to
#  the failover server of the Git Repo System. It is designed to run from the
#  failover server as the git userid using Git and Gitolite utilities.
#
#  Design
#
#  There are two main loop runs:
#  - Difference between the primary and fail-over server repo lists. This identifies new
#    repos to "git clone" from primary to the fail-over server.
#  - List of repos on the fail-over server. This list is used to "git fetch" from the 
#    primary to the fail-over server.
#
#  The string "[ERROR]" is designed to indicate issues that need to be addressed. This
#  string should be searched for on a daily (workday) basis to identify script failures.
#  This search is done on the log/gitbackup-[Date][time].log file. Two other files are
#  saved with each gitbackup log file to support reference and trouble-shooting:
#    - failoverRepos_[Date][time]
#    - primaryRepos_[Date][time]
#  The [Date][time] stamp will normally identify the three file set that is created for
#  each execution of this script.
#
#  Full Backups for recovery of objects that have been removed will also be maintained
#  weekly for four weeks, and monthly for one year. (Still needs to be coded and tested.)
#
#  Dependencies:
#
#    1. ~/git/.ssh/config file is required for this script to run with a gitolite 
#       controlled ssh key. This is required for the git functionality used in this
#       script.
#    2. User id of cmadmin setup on both primary and fail-over servers with ssh key
#       pair setup in ~/.ssh for cmadmin and the cmadmin key par setup in
#       ~/.ssh/gl-trans/cmadmin for the git user. This is required for the scp of
#       the repo gitweb and gitolite configuration files.
#    3. Crontab for ~/git on failover server of Git System.
#    4. Write/read access to server ~/log directory.
#    5. cmadmin userid setup on primary and fail-over servers with ssh key separate 
#       from gitolite control.
#
#  Usage and Monitoring 
#    Designed to run from git crontab on the EM&M Git Repository fail-over server.
#    For trouble shooting, verbose argument is available adding more to the log file
#    (reference variable GitBackupLog).
#      $ gitsystem-backup.bsh [-v]
#
#    Resulting run log files should be reviewed daily to:
#    - Verify this script is functioning correctly. 
#    - Remove log files no longer needed.
# 
#    The log files created by this script are located at ~/log with a softlink going 
#    to /var/log/git. The log files created for each run of this script are as follows:
#    - gitbackup-[YYYY-MM-DD]_[HH:MM:SS].log
#            Contains start and stop messages at beginning and end with full time/date
#            stamps. Messages contained for normal run:
#                  [Start Message]
#                  Get failover repo list ...                  
#                  Get primary repo list ...                  
#                  git clone new repos since last run ... (diff of following log files)                  
#                  git clone repo [repo name]
#                  ...
#                  git fetch all repos...  (should be all repos on fail-over server)
#                  git fetch repo [repo name] 
#                  [End Message]
#            If there are any other messages, they well be warnings or failures that
#            need to be investigated. Most likely the "Finalize DevLead Repo" procedure
#            in the "Git Repo System Admin Guide" was not followed correctly or needs 
#            to be adjusted.
#            The difference between the date/time stamp of this log file and the
#            date/time stamp of the following log files is the time it takes to 
#            "git fetch -all" for all repos.
#    - failoverRepos_[YYYY-MM-DD_[HH:MM:SS]
#            List of repositories found on the fail-over server. Date time stamp is UTC
#            closely matching when this script started.
#    - primaryRepos_[YYYY-MM-DD_[HH:MM:SS]
#            List of repositories found on the primary server. Date time stamp is UTC
#            closely matching when this script started.
#
#  Utilities used:  (Under consideration - documentation via git-scm.com/docs/git-[gc|repack|bundle])
#
#     gitolite writable -h 
#           Disable/re-enable pushes to all repos or named repo.  Useful to run
#           non-git-aware backups and so on.
#
#     git-gc(1)
#           Cleanup unnecessary files and optimize the local repository.
#
#     git-repack(1)
#           Pack unpacked objects in a repository.
#
#     git-bundle(1)
#           Move objects and refs by archive - Considering this for backups to
#            be held for 3 days, 4 weekly's, and Monthly backups to be held for 1 year.
#
#  Files used:
#
#     .failoverRepos
#           List of git repos on the failover server before backup and restore.
#
#     .primaryRepos
#           List of git repos on the primary server before backup and restore.
#
#  Variables used:
#   
#     FailOverRepoDIR
#           FailOver server repository directory.
#
#     FailOverSSHalias
#          The ssh alias used to access the fail-over server. Defined in the
#          ~/.ssh/config file.
#
#     GitBackupLog
#          Path and filename of log for Git System backups, this script.
#
#     LogDIR
#          Directory where this script logs to.
#
#     LogFile
#          Run log for this script. Date/Time stamp is added at end of run.
#
#     PrimaryRepoDIR
#          Primary server repository directory.
#
#     PrimarySSHalias
#          The ssh alias used to access the primary server. Defined in the
#          ~/.ssh/config file.
#
#     RepoList
#          The projects.list used by gitweb. It is copied from the primary server
#          to this failover server by this script.
#
#     ThisScript
#          Install location and file name of this script.
#
#     Var1Gitweb
#           The gitweb configuration filename for each repo.
#
#     Var2Gitweb
#           The gitweb/gitolite repo description filename for each repo.
#           This file is maintained by the repo creator via gitolite
#           utilities.
#
#     Var1gitolite
#           The gitolite configuration filename for each repo. This
#           file is maintained by gitolite utilities via the content
#           of the gitolite.conf file. The gitolite.conf file is
#           maintained by the EM&M CM staff.
#
#     Var2gitolite
#           The gitolite repo creator filename for each repo. This
#           file is initiated by the original repo creator and 
#           maintained by the EM&M CM staff as the main repo contact
#           changes at the direction of development management. The
#           actual modifations are done by gitolite utilities.
#
#     Var3gitolite
#           The gitolite permissions filename for each repo. This
#           file is maintained by the gitolite repo creator. The
#           actual modifations are done by gitolite utilities.
#
### Recent DEV Change NOTES ####
#
#  When testing, leave the gitolite-admin.git repo on the fail-over server. It
#  should never have "git clone" run for it by this script.
#
#  Completed working on basis of gitolite and gitweb files that need to be
#  scp copied initially and maintained so failover server works correctly.
#
#   .gitolite.rc file needed to be updated for new roles on fail-over.
#   
#  Had problems with fail-over server gitolite installation. Needed to reset
#  which pointed out more problems with this code. Spend most of 8/27 correcting
#  and testing code after this change.
######################################################################################
FailOverRepoDIR="/home/git/repositories"
FailOverSSHalias="fail-over"
GitBackupLog="gitbackup"
LogDIR="/home/git/log"
LogFile="$LogDIR/$GitBackupLog"
PrimaryRepoDIR="/home/git/repositories"
PrimarySSHalias="primary"
RepoList="/home/git/projects.list"
ThisScript="/home/git/bin/cmsys-backuprestore.bsh"
Var1Gitweb="config"
Var2Gitweb="description"
Var1gitolite="gl-conf"
Var2gitolite="gl-creator"
Var3gitolite="gl-perms"

# Process script arguments
if [ "$#" -eq "0" ]; then
   echo "`date +%c`Git System Primary to failover Backup run start." > $LogDIR/.running.log 2>&1
elif [ "$#" -gt "1" ]; then
   echo ""
   echo "Invalid argument set. For help execute " $ThisScript " -h"
   echo ""
   echo "greater than 1 argument"
   exit 1
fi

if [ "$#" -eq "1" ]; then
   if [ "$1" == "-v" ]; then
       echo "`date +%c` Testing Backup script " $ThisScript > $LogDIR/.running.log 2>&1
   elif [ "$1" == "-h" ]; then
       echo ""
       echo "usage: $ThisScript [-v|-h]"
       echo ""
       echo "This script is designed to backup and restore the primary server to"
       echo "the failover server of the Git Repo System. It is designed to run from the"
       echo "failover server as the git userid using Git and Gitolite utilities."
       echo ""
       echo "Backups for recovery of objects that have been removed will also be maintained:"
       echo "for three days, four weeks, and monthly for one year."
       echo "for further details, see $ThisScript preamble."
       echo ""
       exit 0
   else
       echo ""
       echo "Invalid argument \"$1\"."
       echo "Valid arguments are -v or -h."
       echo "-v Verbose mode, sends more information to command line for testing."
       echo "For help execute " $ThisScript " -h"
       echo ""
       exit 0
   fi
fi

# Copy primary projects.list to fail-over server.
scp -q -i /home/git/.ssh/gl-trans/cmadmin cmadmin@$PrimarySSHalias:$RepoList $RepoList > /dev/null 2>> $LogDIR/.running.log

# Identify Fail-over and Primary server repos
echo "Get failover repo list..." >> $LogDIR/.running.log 2>&1
ls -F $FailOverRepoDIR/. | grep .git/ - > $LogDIR/.failoverRepos_running

echo "Get primary repo list..." >> $LogDIR/.running.log 2>&1
ssh -n -i /home/git/.ssh/gl-trans/cmadmin cmadmin@$PrimarySSHalias ls -F $PrimaryRepoDIR/. 2> /dev/null | grep .git/ -  > $LogDIR/.primaryRepos_running

echo "git clone new repos since last run..." >> $LogDIR/.running.log 2>&1
cd $FailOverRepoDIR;
diff $LogDIR/.failoverRepos_running $LogDIR/.primaryRepos_running | egrep '^>' |
   while read x f; do
      f=`echo ${f%/}`
      if [ "$1" == "-v" ]; then
         echo "git clone repo " $f;
      fi
      echo "git clone repo " $f >> $LogDIR/.running.log 2>&1
      git clone --bare --mirror $PrimarySSHalias:$f 2> /dev/null >> $LogDIR/.running.log
#      f=`echo ${f%.git}`
      scp -q -i /home/git/.ssh/gl-trans/cmadmin cmadmin@$PrimarySSHalias:$PrimaryRepoDIR/$f/$Var1Gitweb $FailOverRepoDIR/$f/$Var1Gitweb > /dev/null 2>> $LogDIR/.running.log
      scp -q -i /home/git/.ssh/gl-trans/cmadmin cmadmin@$PrimarySSHalias:$PrimaryRepoDIR/$f/$Var2Gitweb $FailOverRepoDIR/$f/$Var2Gitweb > /dev/null 2>> $LogDIR/.running.log
      scp -q -i /home/git/.ssh/gl-trans/cmadmin cmadmin@$PrimarySSHalias:$PrimaryRepoDIR/$f/$Var1gitolite $FailOverRepoDIR/$f/$Var1gitolite > /dev/null 2>> $LogDIR/.running.log
      scp -q -i /home/git/.ssh/gl-trans/cmadmin cmadmin@$PrimarySSHalias:$PrimaryRepoDIR/$f/$Var2gitolite $FailOverRepoDIR/$f/$Var2gitolite > /dev/null 2>> $LogDIR/.running.log
      scp -q -i /home/git/.ssh/gl-trans/cmadmin cmadmin@$PrimarySSHalias:$PrimaryRepoDIR/$f/$Var3gitolite $FailOverRepoDIR/$f/$Var3gitolite > /dev/null 2>> $LogDIR/.running.log
   done

# Create and date/time stamp log files for Failover and primmary server repos.
mv $LogDIR/.failoverRepos_running  $LogDIR/failoverRepos_`date +%F`_`date +%R`:`date +%S`
mv $LogDIR/.primaryRepos_running  $LogDIR/primaryRepos_`date +%F`_`date +%R`:`date +%S`

echo "git fetch all repos..." >> $LogDIR/.running.log 2>&1
cd $FailOverRepoDIR;
for f in */.; do
   f=`echo ${f%/.}`
   if [ "$1" == "-v" ]; then
      echo "git fetch repo " $f;
   fi
   cd $FailOverRepoDIR/$f;
   echo "git fetch repo " $f >> $LogDIR/.running.log 2>&1
   git fetch --all 2>> $LogDIR/.running.log
   scp -q -i /home/git/.ssh/gl-trans/cmadmin cmadmin@$PrimarySSHalias:$PrimaryRepoDIR/$f/$Var1Gitweb $FailOverRepoDIR/$f/$Var1Gitweb > /dev/null 2>> $LogDIR/.running.log
   scp -q -i /home/git/.ssh/gl-trans/cmadmin cmadmin@$PrimarySSHalias:$PrimaryRepoDIR/$f/$Var2Gitweb $FailOverRepoDIR/$f/$Var2Gitweb > /dev/null 2>> $LogDIR/.running.log
   scp -q -i /home/git/.ssh/gl-trans/cmadmin cmadmin@$PrimarySSHalias:$PrimaryRepoDIR/$f/$Var1gitolite $FailOverRepoDIR/$f/$Var1gitolite > /dev/null 2>> $LogDIR/.running.log
   scp -q -i /home/git/.ssh/gl-trans/cmadmin cmadmin@$PrimarySSHalias:$PrimaryRepoDIR/$f/$Var2gitolite $FailOverRepoDIR/$f/$Var2gitolite > /dev/null 2>> $LogDIR/.running.log
   scp -q -i /home/git/.ssh/gl-trans/cmadmin cmadmin@$PrimarySSHalias:$PrimaryRepoDIR/$f/$Var3gitolite $FailOverRepoDIR/$f/$Var3gitolite > /dev/null 2>> $LogDIR/.running.log
done

echo "`date +%c` Git System Primary to failover Backup run complete." >> $LogDIR/.running.log 2>&1
mv $LogDIR/.running.log $LogFile-`date +%F`_`date +%R`:`date +%S`.log

exit 0
