#!/bin/bash         
######################################################################################
# gitsys-backuprestore.bsh
#
#  Written by Andy Wallace 08/11/14
#
#  Purpose:
#
#  This script is designed to backup and restore the primary server to
#  the failover server of the EMM Git Repo System. It is designed to run from the
#  failover server as the git userid using Git and Gitolite utilities.
#
#  Backups for recovery of objects that have been removed will also be maintained
#  for three days, four weeks, and monthly for one year.
#
#  Dependencies:
#
#    1. ~/git/.ssh/config file is required for this script to run with an admin ssh
#       key setup accordingly on both system servers (primary/fail-over).
#    2. Crontab for ~/git on failover server of EMM Git System.
#    3. Write/read access to server ~/log directory.
#
#  Usage: 
#    Intended to run from git crontab. For trouble shooting, verbose argument
#    is available adding more to the log file (reference variable GitBackupLog).
#      $ gitsystem-backup.bsh [-v]
#
#  Utilities used:  (Under consideration - documentation via git-scm.com/docs/git-[gc|repack|bundle])
#
#     gitolite writable -h (Must be logged on as userid git on repo server.) 
#           Disable/re-enable pushes to all repos or named repo.  Useful to run
#           non-git-aware backups and so on.
#
#     git-gc(1)
#           Cleanup unnecessary files and optimize the local repository.
#
#     git-repack(1)
#           Pack unpacked objects in a repository.
#
#     git-bundle(1)
#           Move objects and refs by archive - Considering this for backups to
#            be held for 3 days, 4 weekly's, and Monthly backups to be held for 1 year.
#
#  Files used:
#
#     .failoverRepos
#           List of git repos on the failover server before backup and restore.
#
#     .primaryRepos
#           List of git repos on the primary server before backup and restore.
#
#  Variables used:
#   
#     FailOverRepoDIR
#           FailOver server repository directory.
#
#     FailOverSSHalias
#          The ssh alias used to access the fail-over server. Defined in the
#          ~/.ssh/config file.
#
#     GitBackupLog
#          Path and filename of log for EMM Git System backups, this script.
#
#     PrimaryRepoDIR
#           Primary server repository directory.
#
#     PrimarySSHalias
#          The ssh alias used to access the primary server. Defined in the
#          ~/.ssh/config file.
#
######################################################################################

FailOverRepoDIR="/home/git/repositories"
GitBackupLog="gitbackup"
LogDIR="/home/git/log"
PrimaryRepoDIR="/home/git/repositories"
PrimarySSHalias="primary"
FailOverSSHalias="fail-over"
ThisScript="/home/git/bin/cmsys-backuprestore.bsh"
LogFile="$LogDIR/$GitBackupLog"

# Process script arguments
if [ "$#" -eq "0" ]; then
   /bin/echo "`date +%c` EMM Git System Primary to failover Backup run start." > $LogDIR/.running.log 2>&1
elif [ "$#" -gt "1" ]; then
   /bin/echo ""
   /bin/echo "Invalid argument set. For help execute " $ThisScript " -h"
   /bin/echo ""
/bin/echo "greater than 1 argument"
   exit 1
fi
if [ "$#" -eq "1" ]; then
   if [ "$1" == "-v" ]; then
       /bin/echo "`date +%c` Testing Backup script " $ThisScript > $LogDIR/.running.log 2>&1
   elif [ "$1" == "-h" ]; then
       /bin/echo ""
       /bin/echo "usage: $ThisScript [-v|-h]"
       /bin/echo ""
       /bin/echo "This script is designed to backup and restore the primary server to"
       /bin/echo "the failover server of the EMM Git Repo System. It is designed to run from the"
       /bin/echo "failover server as the git userid using Git and Gitolite utilities."
       /bin/echo ""
       /bin/echo "Backups for recovery of objects that have been removed will also be maintained:"
       /bin/echo "for three days, four weeks, and monthly for one year."
       /bin/echo "for further details, see $ThisScript preamble."
       /bin/echo ""
       exit 0
   else
       /bin/echo ""
       /bin/echo "Invalid argument \"$1\"."
       /bin/echo "Valid arguments are -v or -h."
       /bin/echo "-v Verbose mode, sends more information to log files for testing."
       /bin/echo "For help execute " $ThisScript " -h"
       /bin/echo ""
       exit 0
   fi
fi

# Identify Fail-over and Primary server repos
cd $FailOverRepoDIR

/bin/echo "Get failover repo list..." >> $LogDIR/.running.log 2>&1
/usr/bin/ssh $FailOverSSHalias info 2>> $LogDIR/.running.log | /bin/grep "R W" | /bin/gawk '{print $3}' -  > $LogDIR/.failoverRepos_running
/bin/echo "Get primary repo list..." >> $LogDIR/.running.log 2>&1
#/usr/bin/ssh -n $PrimarySSHalias /bin/ls -F $PrimaryRepoDIR/. 2>> $LogDIR/.running.log | grep .git/ > $LogDIR/.primaryRepos_running
/usr/bin/ssh $PrimarySSHalias info 2>> $LogDIR/.running.log | /bin/grep "R W" | /bin/gawk '{print $3}' -  > $LogDIR/.primaryRepos_running
if [ "$1" == "-v" ]; then
   cat $LogDIR/.primaryRepos_running $LogDIR/.running.log
fi

/bin/echo "git clone new repos since last run..." >> $LogDIR/.running.log 2>&1

/usr/bin/diff $LogDIR/.failoverRepos_running $LogDIR/.primaryRepos_running | egrep '^>' |
   while read x f; do
      f=`echo ${f%/}`
      if [ "$1" == "-v" ]; then
         /bin/echo "git clone repo " $f;
      fi
      /bin/echo "git clone repo " $f >> $LogDIR/.running.log 2>&1
      /usr/bin/git clone --bare --mirror $PrimarySSHalias:$f >>$LogDIR/.running.log 2>&1
   done

/bin/mv $LogDIR/.failoverRepos_running  $LogDIR/failoverRepos_`date +%F`_`date +%R`:`date +%S`
/bin/mv $LogDIR/.primaryRepos_running  $LogDIR/primaryRepos_`date +%F`_`date +%R`:`date +%S`

/bin/echo "git fetch all repos..." >> $LogDIR/.running.log 2>&1
for f in */.; do 
   f=`echo ${f%/.}`
   if [ "$1" == "-v" ]; then
      /bin/echo "git fetch repo " $f;
   fi
   cd $FailOverRepoDIR/$f;
   /bin/echo "git fetch repo " $f >> $LogDIR/.running.log 2>&1
   /usr/bin/git fetch --all >> $LogDIR/.running.log 2>&1
done

echo "`date +%c` EMM Git System Primary to failover Backup run complete." >> $LogDIR/.running.log 2>&1
/bin/mv $LogDIR/.running.log $LogFile-`date +%F`_`date +%R`:`date +%S`.log

exit 0
